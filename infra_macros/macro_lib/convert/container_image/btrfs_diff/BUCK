python_library(
    name = "extent",
    srcs = ["extent.py"],
    base_module = "btrfs_diff",
)

python_unittest(
    name = "test-extent",
    srcs = ["tests/test_extent.py"],
    base_module = "btrfs_diff",
    needed_coverage = [(
        1.0,
        ":extent",
    )],
    deps = [":extent"],
)

python_library(
    name = "subvol_path",
    srcs = ["subvol_path.py"],
    base_module = "btrfs_diff",
)

python_unittest(
    name = "test-subvol-path",
    srcs = ["tests/test_subvol_path.py"],
    base_module = "btrfs_diff",
    needed_coverage = [(
        1.0,
        ":subvol_path",
    )],
    deps = [":subvol_path"],
)

python_library(
    name = "inode_id",
    srcs = ["inode_id.py"],
    base_module = "btrfs_diff",
)

python_unittest(
    name = "test-inode-id",
    srcs = ["tests/test_inode_id.py"],
    base_module = "btrfs_diff",
    needed_coverage = [(
        1.0,
        ":inode_id",
    )],
    deps = [":inode_id"],
)

python_library(
    name = "inode",
    srcs = ["inode.py"],
    base_module = "btrfs_diff",
    deps = [
        ":extent",
        ":inode_id",
    ],
)

python_unittest(
    name = "test-inode",
    srcs = ["tests/test_inode.py"],
    base_module = "btrfs_diff",
    needed_coverage = [(
        1.0,
        ":inode",
    )],
    deps = [":inode"],
)

python_library(
    name = "incomplete_inode",
    srcs = ["incomplete_inode.py"],
    base_module = "btrfs_diff",
    deps = [
        ":extent",
        ":inode",
        ":inode_id",
        ":parse_send_stream",
    ],
)

python_unittest(
    name = "test-incomplete-inode",
    srcs = ["tests/test_incomplete_inode.py"],
    base_module = "btrfs_diff",
    needed_coverage = [(
        1.0,
        ":incomplete_inode",
    )],
    deps = [":incomplete_inode"],
)

python_library(
    name = "extents_to_chunks",
    srcs = ["extents_to_chunks.py"],
    base_module = "btrfs_diff",
    deps = [
        ":extent",
        ":inode",
    ],
)

python_unittest(
    name = "test-extents-to-chunks",
    srcs = ["tests/test_extents_to_chunks.py"],
    base_module = "btrfs_diff",
    needed_coverage = [(
        1.0,
        ":extents_to_chunks",
    )],
    deps = [":extents_to_chunks"],
)

python_library(
    name = "parse_send_stream",
    srcs = [
        "parse_dump.py",
        "send_stream.py",
    ],
    base_module = "btrfs_diff",
    deps = [
        ":subvol_path",
        "//tools/build/buck/infra_macros/macro_lib/convert/container_image/" +
        "compiler:enriched_namedtuple",
    ],
)

# The reason we need the gold data is explained in `demo_sendtreams.py`.
export_file(
    name = "gold_demo_sendstreams.pickle",
    src = "tests/gold_demo_sendstreams.pickle",
)

python_unittest(
    name = "test-send-stream",
    srcs = [
        "tests/btrfs_utils.py",
        "tests/demo_sendstreams.py",
        "tests/test_parse_dump.py",
    ],
    base_module = "btrfs_diff",
    gen_srcs = {
        ":gold_demo_sendstreams.pickle": "tests/gold_demo_sendstreams.pickle",
    },
    needed_coverage = [(
        1.0,
        ":parse_send_stream",
    )],
    # "fastzip" won't work for two reasons: (i) we re-execute
    # "demo_sendstreams.py", (ii) we have an 'export_file' dep.
    par_style = "zip",
    deps = [
        ":gold_demo_sendstreams.pickle",
        ":parse_send_stream",
        "//tools/build/buck/infra_macros/macro_lib/convert/container_image" +
        ":artifacts_dir",
        "//tools/build/buck/infra_macros/macro_lib/convert/container_image" +
        ":volume_for_repo",
    ],
)
