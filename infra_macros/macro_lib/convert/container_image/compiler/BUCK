# NB: There is no binary here because the image compiler does not get built
# by Buck, it is executed in-place using the system Python.

python_library(
    name = "subvolume_on_disk",
    srcs = ["subvolume_on_disk.py"],
    base_module = "compiler",
)

python_unittest(
    name = "test-subvolume-on-disk",
    srcs = ["tests/test_subvolume_on_disk.py"],
    base_module = "compiler",
    needed_coverage = [(
        1.0,
        ":subvolume_on_disk",
    )],
    deps = [":subvolume_on_disk"],
)

python_library(
    name = "enriched_namedtuple",
    srcs = ["enriched_namedtuple.py"],
    base_module = "compiler",
)

python_unittest(
    name = "test-enriched-namedtuple",
    srcs = ["tests/test_enriched_namedtuple.py"],
    base_module = "compiler",
    needed_coverage = [(
        1.0,
        ":enriched_namedtuple",
    )],
    deps = [":enriched_namedtuple"],
)

python_library(
    name = "requires_provides",
    srcs = [
        "path_object.py",
        "provides.py",
        "requires.py",
    ],
    base_module = "compiler",
    deps = [":enriched_namedtuple"],
)

python_unittest(
    name = "test-requires-provides",
    srcs = ["tests/test_requires_provides.py"],
    base_module = "compiler",
    needed_coverage = [(
        1.0,
        ":requires_provides",
    )],
    deps = [":requires_provides"],
)

python_library(
    name = "mock_subvolume_from_json_file",
    srcs = ["tests/mock_subvolume_from_json_file.py"],
    base_module = "compiler",
    deps = [":subvolume_on_disk"],
)

python_library(
    name = "items",
    srcs = ["items.py"],
    base_module = "compiler",
    deps = [
        ":requires_provides",
        ":subvolume_on_disk",
    ],
)

python_unittest(
    name = "test-items",
    srcs = ["tests/test_items.py"],
    base_module = "compiler",
    needed_coverage = [(
        1.0,
        ":items",
    )],
    deps = [
        ":items",
        ":mock_subvolume_from_json_file",
    ],
)

python_library(
    name = "dep_graph",
    srcs = ["dep_graph.py"],
    base_module = "compiler",
    deps = [":items"],
)

python_unittest(
    name = "test-dep-graph",
    srcs = ["tests/test_dep_graph.py"],
    base_module = "compiler",
    needed_coverage = [(
        1.0,
        ":dep_graph",
    )],
    deps = [":dep_graph"],
)

python_library(
    name = "items_for_features",
    srcs = ["items_for_features.py"],
    base_module = "compiler",
    deps = [":items"],
)

python_library(
    name = "sample_items",
    srcs = ["tests/sample_items.py"],
    base_module = "compiler",
    deps = [":items"],
)

def READ_MY_DOC_image_feature_target(name):
    '''
    DANGER: If you depend on a feature target for testing, you MUST manually
    add any `image_feature` targets that it depends on to your `deps = []`.
    If you fail to do this, Buck will not know to rebuild the the test if
    one of its indirect `image_feature` dependencies changes.  See
    `image_feature.py` for an explanation.
    '''
    return name + (
        '_IF_YOU_REFER_TO_THIS_RULE_YOUR_DEPENDENCIES_WILL_BE_BROKEN_'
        'SO_DO_NOT_DO_THIS_EVER_PLEASE_KTHXBAI'
    )

# Transitive deps of `tests:feature_dirs_and_copy_tar` --

TEST_IMAGE_FEATURE_TRANSITIVE_DEPS = [
    READ_MY_DOC_image_feature_target("feature_dirs"),
    READ_MY_DOC_image_feature_target("feature_bad_dir"),
    READ_MY_DOC_image_feature_target("feature_tar"),
    READ_MY_DOC_image_feature_target("feature_copy_dirs_tar"),
    "hello_world.tar",
]

TEST_TARGET_PREFIX = (
    "//tools/build/buck/infra_macros/macro_lib/convert/container_image/" +
    "compiler/tests:"
)

def image_feature_python_unittest(**kwargs):
    kwargs["base_module"] = "compiler"
    kwargs["env"] = {
        "test_image_feature_path_to_" + t: "$(location {})".format(
            TEST_TARGET_PREFIX + t,
        )
        for t in TEST_IMAGE_FEATURE_TRANSITIVE_DEPS
    }
    # The test reads `feature.json`, so we need actual files on disk.
    kwargs["par_style"] = "zip"
    kwargs['deps'] = kwargs.pop('deps') + [":sample_items"]
    # For now cpp_deps is raw buck deps for python_ targets
    kwargs['cpp_deps'] = [
        TEST_TARGET_PREFIX + t
        for t in TEST_IMAGE_FEATURE_TRANSITIVE_DEPS
    ]
    return python_unittest(**kwargs)

image_feature_python_unittest(
    name = "test-image-feature",
    srcs = ["tests/test_image_feature.py"],
    # I cannot get coverage for `image_feature.py` here, because that is
    # executed by the Buck Python runtime.  I could conceivably shim all
    # that out, but it seems entirely not worth the trouble.
    needed_coverage = [(
        1.0,
        ":items_for_features",
    )],
    deps = [
        ":dep_graph",
        ":items_for_features",
    ],
)

python_library(
    name = "compiler",
    srcs = ["compiler.py"],
    base_module = "compiler",
    deps = [
        ":dep_graph",
        ":items_for_features",
        ":subvolume_on_disk",
    ],
)

image_feature_python_unittest(
    name = "test-compiler",
    srcs = ["tests/test_compiler.py"],
    needed_coverage = [(
        1.0,
        ":compiler",
    )],
    deps = [
        ":compiler",
        ":mock_subvolume_from_json_file",
    ],
)

IMAGE_LAYER_DEPS = [
    "child_layer",
    "parent_layer",
    "hello_world_base",
]

python_unittest(
    name = "test-image-layer",
    srcs = ["tests/test_image_layer.py"],
    base_module = "compiler",
    # Python `deps` don't work as you'd expect in fbcode -- they have to be
    # other `python_*` rules.  `cpp_deps` is the kitchen sink?
    cpp_deps = [
        # Buck bug: `env` does not create a dependency; do it explicitly.
        TEST_TARGET_PREFIX + t
        for t in IMAGE_LAYER_DEPS
    ],
    env = {
        "test_image_layer_path_to_" + t: "$(location {})".format(
            TEST_TARGET_PREFIX + t,
        )
        for t in IMAGE_LAYER_DEPS
    },
    # As with `test-image-feature`, we cannot get `image_layer.py` coverage.
    deps = [
        ":subvolume_on_disk",
        "//tools/build/buck/infra_macros/macro_lib/convert/container_image" +
        ":artifacts_dir",
        "//tools/build/buck/infra_macros/macro_lib/convert/container_image" +
        ":volume_for_repo",
    ],
)
